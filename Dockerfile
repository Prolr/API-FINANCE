FROM python:3.11-slim

# Instala dependÃªncias do sistema (ODBC + gcc)
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    unixodbc \
    unixodbc-dev \
    libpq-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Define diretÃ³rio de trabalho
WORKDIR /app

# Copia requirements primeiro
COPY requirements.txt .

# Instala dependÃªncias Python
RUN pip install --no-cache-dir -r requirements.txt

# Copia o restante do projeto
COPY . .

# ExpÃµe a porta
EXPOSE 8000

# Comando padrÃ£o
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]




# CODIGOS PARA DOCKERFILE :
    
# ğŸ“Œ Buildar imagem

    # docker build -t minha_api .    --->  -t dÃ¡ um nome/tag Ã  imagem).

# ğŸ“Œ Rodar container

    # docker run -d -p 8000:8000 --name FINANCE API    -d â†’ modo "detached" (roda em segundo plano)

    # -p â†’ mapeia porta (host:container)   --name â†’ dÃ¡ nome ao container


# ğŸ“Œ Listar containers

    #   docker ps             containers rodando
    #   docker ps -a          todos containers (inclui parados)


# ğŸ“Œ Parar / iniciar container

    # docker stop api
    # docker start api

# ğŸ“Œ Remover container

    # docker rm api


# ğŸ“Œ Remover imagem

    # docker rmi minha_api

# ğŸ“Œ Entrar dentro do container

    # docker exec -it api bash  ---->   (-it dÃ¡ terminal interativo, tipo SSH no container)

# ğŸ“Œ Ver logs

    # docker logs -f api    ---> (-f = segue em tempo real)

# ğŸ“Œ Atualizar container (rebuildar)

    # docker stop api
    # docker rm api
    # docker build -t minha_api .
    # docker run -d -p 8000:8000 --name api minha_api

# ğŸ“Œ Subir containers

    # docker-compose up
    # docker-compose up -d   # em segundo plano

# ğŸ“Œ Derrubar containers

    # docker-compose down

# ğŸ“Œ Rebuildar (apÃ³s mudar Dockerfile)

    # docker-compose up --build

# ğŸ“Œ Escalar serviÃ§os

    # docker-compose up --scale api=3 -d   ---> (sobe 3 instÃ¢ncias do serviÃ§o api)

# ğŸ“Œ Logs de todos os serviÃ§os

    # docker-compose logs -f

# ğŸ“Œ Rodar comando dentro do serviÃ§o

    # docker-compose exec api alembic upgrade head



 #   âš¡ Atalhos Ãºteis no dia a dia

# Parar tudo

    # docker stop $(docker ps -q)


# Remover tudo parado

    # docker container prune


# Remover todas imagens nÃ£o usadas

    # docker image prune -a


# Ver espaÃ§o usado pelo Docker

    # docker system df